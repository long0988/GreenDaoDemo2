package com.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.greendaodemo2.MovieCollect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE_COLLECT".
*/
public class MovieCollectDao extends AbstractDao<MovieCollect, Long> {

    public static final String TABLENAME = "MOVIE_COLLECT";

    /**
     * Properties of entity MovieCollect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MovieImage = new Property(1, String.class, "movieImage", false, "MOVIE_IMAGE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Year = new Property(3, int.class, "year", false, "YEAR");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property MovieName = new Property(6, String.class, "movieName", false, "MOVIE_NAME");
        public final static Property Sex = new Property(7, int.class, "sex", false, "SEX");
        public final static Property CC = new Property(8, String.class, "CC", false, "CC");
        public final static Property AA = new Property(9, String.class, "AA", false, "AA");
    }


    public MovieCollectDao(DaoConfig config) {
        super(config);
    }
    
    public MovieCollectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE_COLLECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MOVIE_IMAGE\" TEXT," + // 1: movieImage
                "\"TITLE\" TEXT," + // 2: title
                "\"YEAR\" INTEGER NOT NULL ," + // 3: year
                "\"DATE\" INTEGER," + // 4: date
                "\"DESC\" TEXT," + // 5: desc
                "\"MOVIE_NAME\" TEXT," + // 6: movieName
                "\"SEX\" INTEGER NOT NULL ," + // 7: sex
                "\"CC\" TEXT," + // 8: CC
                "\"AA\" TEXT);"); // 9: AA
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE_COLLECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MovieCollect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String movieImage = entity.getMovieImage();
        if (movieImage != null) {
            stmt.bindString(2, movieImage);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getYear());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String movieName = entity.getMovieName();
        if (movieName != null) {
            stmt.bindString(7, movieName);
        }
        stmt.bindLong(8, entity.getSex());
 
        String CC = entity.getCC();
        if (CC != null) {
            stmt.bindString(9, CC);
        }
 
        String AA = entity.getAA();
        if (AA != null) {
            stmt.bindString(10, AA);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MovieCollect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String movieImage = entity.getMovieImage();
        if (movieImage != null) {
            stmt.bindString(2, movieImage);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getYear());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String movieName = entity.getMovieName();
        if (movieName != null) {
            stmt.bindString(7, movieName);
        }
        stmt.bindLong(8, entity.getSex());
 
        String CC = entity.getCC();
        if (CC != null) {
            stmt.bindString(9, CC);
        }
 
        String AA = entity.getAA();
        if (AA != null) {
            stmt.bindString(10, AA);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MovieCollect readEntity(Cursor cursor, int offset) {
        MovieCollect entity = new MovieCollect( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // movieImage
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getInt(offset + 3), // year
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // movieName
            cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CC
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // AA
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MovieCollect entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMovieImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYear(cursor.getInt(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMovieName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.getInt(offset + 7));
        entity.setCC(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAA(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MovieCollect entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MovieCollect entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MovieCollect entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
